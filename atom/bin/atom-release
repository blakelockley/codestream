#!/bin/bash

#desc# interactive atom release script

[ -z "$ATOM_TOP" ] && echo "atom sandbox not loaded" && exit 1

cd $ATOM_TOP || exit 1

# checkout master for all repos, ensure it's up to date
git checkout develop && git pull origin || exit 1
git checkout master && git pull origin || exit 1
gitStatus=`git status -sb`
[ $gitStatus != "## master...origin/master" ] && echo "This does not appear to be a clean master branch" && exit 1

# verify / fetch current release
#    atom-client/package.json
#    atom marketplace (https://www.atom.io/api/packages/codestream)
marketRelease=`get-json-property -j https://www.atom.io/api/packages/codestream -p releases.latest`
[ -z "$marketRelease" ] && echo "Could not get release from atom marketplace. Aborting" && exit 1

thisRelease=`get-json-property -j package.json -p version`
[ -z "$thisRelease" ] && echo "Could not determine release from package.json"

echo "
	marketRelease = $marketRelease
	thisRelease =  $thisRelease
"

echo -n "Go (y/N)? "; read ans
[ "$ans" != "y" ] && echo "never mind" && exit

echo npm run bundle
npm run bundle || exit 1

echo npm run pack $marketRelease --commit-and-push
npm run pack $marketRelease --commit-and-push || exit 1

# Sanity check....
if [ -d /Applications/Atom.app ]; then
	(cd ../../atom-client && apm uninstall codestream && apm link) || exit 1
	echo apm install --production teamcodestream/atom-client
	apm install --production teamcodestream/atom-client || exit 1
	echo "Santity check..."
	open /Applications/Atom.app
	echo -n "Press ENTER to continue" && read
fi

echo -n "press ENTER to publish..."; read
echo "apm publish $thisRelease"
(cd $ATOM_SANDBOX/atom-client && apm publish $thisRelease) || exit 1

git status
echo -n "press ENTER to push (why??)..."; read
echo "git push origin master"
git push origin master || exit 1

echo -n "press ENTER to tag..."; read
tag="atom-$thisRelease"
echo "Applying tag $tag..."
git tag $tag && git push origin $tag

echo "Bumping patch version on develop..."
git checkout develop || exit 1
dt-sb-version-tool --bump-version patch || exit 1
nextVersion=`dt-sb-version-tool --report-version`
[ -z "$nextVersion" -o "$nextVersion" == "$thisRelease" ] && echo "Uh oh!! Was the version updated properly?" && exit 1
git commit -am "Auto-bump of Atom version to $nextVersion following marketplace release" || exit 1
git push origin develop || exit 1

exit 0
