#!/bin/bash

[ -z "$1" ] && echo "Do not run this script directly. Run dt-configure-sandbox instead." && exit 1

# argument:
#   configure         normal configuration mode. Run on a clean install or reconfigure (mode = configure)
#   git_hook          run from within a git hook (mode = git_hook)
#   deploy            run from within a deployment (dt-build)
#   configureNoAbort  configuration mode but don't abort early if there's a build failure (mode = configure)
mode=""
abort_on_fail=1
[ "$1" == "git-hook" ] && mode=git_hook
[ "$1" == "configure" ] && mode=configure
[ "$1" == "deploy" ] && mode=deploy
[ "$1" == "configureNoAbort" ] && mode=configure && abort_on_fail=0
[ -z "$mode" ] && echo "Error: bad configure mode" && exit 1

# This script is called as a hook (from dt-configure-sandbox, deployment script, git hook, ...).
# DO NOT CALL IT DIRECTLY.
#
# Place any commands needed to prepare the sandbox for use here. Assume the
# environment is set

cd $ATOM_REPO_ROOT

# Install git submodules
[ -f .gitmodules ] && echo "Updating submodules" && git submodule update --init --recursive

# Add git hooks as needed
# if [ -d "$ATOM_TOP/hooks" ]; then
# 	echo -n "Installing git hooks as sym links"
# 	cd $ATOM_TOP/.git/hooks
# 	for hook in post-checkout post-merge post-rewrite
# 	do
# 		if [ -f $ATOM_TOP/hooks/$hook ]; then
# 			echo -n "...$hook"
# 			/bin/rm -f $hook
# 			ln -sf ../../hooks/$hook
# 		fi
# 	done
# 	echo "."
# fi

cd $ATOM_TOP

# Exmaple: expanding templates
# $DT_TOP/bin/create-file-from-template.py -t $XYZ_SANDBOX/git_project/etc/httpd.conf.template -o $XYZ_SANDBOX/conf/httpd.conf

apmCmd=`which apm`
if [ -z "$apmCmd" ]; then
	echo "********
WARNING: apm command not found - you need apm to properly install modules for atom
********"
	exit 1
fi

echo "Installing node modules with atom package manager (apm)"
apm install --no-save

cd $ATOM_TOP || exit 1

echo "
-*-*-*-  Using atom 'apm' package manager in lieu of 'npm' for atom client and webview
"

echo "Agent install and build"
(cd ../shared/agent && npm install --no-save && npm run build)

echo "UI install using apm"
(cd ../shared/ui && apm install --no-save)

echo "ATOM build"
npm run build

echo "

***** Remember to run 'apm link' in the atom directory after you load your sandbox
***** to make your atom point to it

"

# You must exit with a status of '0' if the script was successful or '1' otherwise.
exit 0
